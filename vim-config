#! /bin/bash
# Script that customises Vim for personal needs
# Currently it sets functionality for converting tab to spaces
#
# Usage: {script-name}

. ./common-script

# Exit statuses
EXIT_UNSPECIFIED_ROOT=139

# Recommended  addition to .vimrc
# Due to presence of defaults.vim
# See ":help defaults.vim"
# Doesn't work for version less than 8
DEFAULTS_ADDITION='unlet! skip_defaults_vim\nsource $VIMRUNTIME/defaults.vim'

# Variables for configuration
# Number of space to insert when hitting <Tab> in all places
# If smarttab is on "shiftwidth" value takes effect at starting of lines
TABSTOP_SIZE=2

# Useful for "ts" option
# Not clear (see :help softtabstop)
SOFTTABSTOP_SIZE=0

# 1. Number of spaces to insert when hitting <Tab> in start of line
#    Takes effect only if smarttab to be on else only "2" is in effect.
# 2. Number of spaces to insert when shifting (see shift-left-right)
SHIFTWIDTH_SIZE=2


# Configuration used
tab_to_space_config="set \
                      tabstop=$TABSTOP_SIZE \
                      softtabstop=$SOFTTABSTOP_SIZE \
                      shiftwidth=$SHIFTWIDTH_SIZE \
                      expandtab
                     "

# Function that returns 0 (success) if the version
# of vim being used is greater than or equal to 8
vim_version_8() {
  # parse the otput of `vim --version` to get the version number
  vim_version=`vim --version | awk '{if (NR == 1) print $5}'`
  vim_major_version=`echo $vim_version | grep -o '^[0-9]'`

  if [ $vim_major_version -ge 8 ]
  then
    return 0
  else
    return 1
  fi
}

VIMRC="$HOME/.vimrc"

execute_vim() {
  # Check if .vimrc exists before and
  # print a warning if it exists
  if [ -f $VIMRC ]
  then
    notify '.vimrc exists. You may want to check that the script does not affect previous configurations'
  fi

  # Check if vim version is greater than 8 as defaults.vim
  # doesn't exist in previous versions
  if ( vim_version_8 )
  then
    notify "vim version ${BROWN}>=${NC} 8 detected. Configuring vimrc accordingly."
    append_to_file $VIMRC "$DEFAULTS_ADDITION\n"
  else
    notify "vim version ${BROWN}<${NC} 8 detected. Configuring vimrc accordingly."
  fi
  append_to_file $VIMRC "$tab_to_space_config"
}

# Check if user is ROOT and notify if he is.
if root_check && [ "$1" != 'root' ]
then
  error 'You are executing this script as root.\nTo override pass root as first argument.\nAborting' $EXIT_UNSPECIFIED_ROOT
else
   execute_vim
   echo "Vim configuration for 'tab to spaces' successful!"
fi
