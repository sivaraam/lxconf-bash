#! /bin/bash
# Script to ease common apt commands
#
# Usage: {script-name} [ upd | upg | dist | rem | ins <package-name> ]
#
# Short forms
#   1. upd  - u
#   2. upg  - U
#   3. dist - d
#   4. rem  - r
#   5. ins  - i

# Source the common functions
. common-script

# Function to execute apt-get command
execute_apt() {
  if [ $# -lt 1 ]
  then
    error $FUNCTION_ERR_MSG
  fi

  # Return values
  IS_ROOT=0
  IS_NOT_ROOT=1
  root_check() {
    ROOT_UID=0 # Root has $UID 0.
    if [ $UID -eq $ROOT_UID ]
    then
      return $IS_ROOT
    else
      return $IS_NOT_ROOT
    fi
  }

  # check if user is root and execut command accordingly
  if root_check
  then
    apt-get $@
  else
    sudo apt-get $@
  fi
}

if [ "$1" == "upd" ] || [ "$1" == "u" ]    # Update Package lists
then
  execute_apt update
elif [ "$1" == "upg" ] || [ "$1" == "U" ]  # Update Package lists and Upgrade Packages
then
  execute_apt update && execute_apt upgrade
elif [ "$1" == "dist" ] || [ "$1" == "d" ] # Update Package lists and Perform dist-upgrade
then
  execute_apt update && execute_apt dist-upgrade
elif [ "$1" == "rem" ]  || [ "$1" == "r" ] # Remove unwanted packages
then
  execute_apt autoremove
elif [ "$1" == "ins" ] || [ "$1" == "i" ]  # Install package specified in second parameter
then
  if [ $# -lt 2 ]
  then
    print_usage "ins <package_name>"
  fi
#  packages=`extract_packages "$*"`

# shift by one parameter to get the list of packages
  shift
  execute_apt "install $@"
else                                       # Print usage method
  print_usage
fi
