#! /bin/bash
# Script to ease common apt commands
#
# Usage: {script-name} [ upd | upg | dist | rem | ins <package-name> ]
#
# Short forms
#   1. upd  - u
#   2. upg  - U
#   3. dist - d
#   4. rem  - r
#   5. ins  - i


# Function to print error message
error_msg() {
  exec 1>&2 # duplicate stdout to stderr

  if [ -z "$1" ]
  then
    echo "FATAL, improper usage of core function"
  else
    echo -e $1
  fi

  exec 1>&- # remove binding of stdout to stderr
  exit 1
}


# Function to print Usage information
print_usage() {
  # By default print script parameters
  script_params="[ upd | upg | dist | rem | ins ]"
  msg=${1-$script_params}

  script_invocation_name=`basename $0`
  error_msg "Usage: $script_invocation_name $msg"
}

# Function to execute apt-get command
apt_execute() {
  if [ $# -lt 1 ]
  then
    error_msg "Parameter missing for core function !"
  fi

  # Shouldn't be a problem with executing the command
  # when execution reaches here
  root_check() {
    ROOT_UID=0 # Root has $UID 0.
    if [ $UID -eq $ROOT_UID ]
    then
      return 0
    else
      return 1
    fi
  }

  # check if user is root and execut command accordingly
  if root_check
  then
    apt-get $1
  else
    sudo apt-get $1
  fi
}

if [ "$1" == "upd" ] || [ "$1" == "u" ]    # Update Package lists
then
  apt_execute update
elif [ "$1" == "upg" ] || [ "$1" == "U" ]  # Update Package lists and Upgrade Packages
then
  apt_execute update && apt_execute upgrade
elif [ "$1" == "dist" ] || [ "$1" == "d" ] # Update Package lists and Perform dist-upgrade
then
  apt_execute update && apt_execute dist-upgrade
elif [ "$1" == "rem" ]  || [ "$1" == "r" ] # Remove unwanted packages
then
  apt_execute autoremove
elif [ "$1" == "ins" ] || [ "$1" == "i" ]  # Install package specified in second parameter # TODO : Generalize for multiple packages
then
  if [ $# -lt 2 ]
  then
    print_usage "ins <package_name>"
  fi
  apt_execute "install $2"
else                                       # Print usage method
  print_usage
fi
